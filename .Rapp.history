set.seed(1)#
#
x <- seq(0, 1, by = 0.01)#
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
ggplot(x,y,aes(x=x,y=y))
df <- data.frame(X=x, Y=y)
head(df)
ggplot(df, aes(x=X,y=Y))+geom_point()
head(rev(x))
x<-matrix(x)
x
library('glmnet')
head(y,1-)
head(y,15)
glmnet(x,y)
x <- seq(0, 1, by = 0.01)
x
x <- matrix(x)
x
glmnet(x,y)
x <- seq(0, 1, by = 0.01)
cbind(x,rev(x))
x <- as.matrix(cbind(x,rev(x)))
head(x,15)
glmnet(x,y)
?glmnet
x=matrix(rnorm(100*20),100,20)
x
head(x)
rnorm(100*20)
rnorm(10*2)
rnorm(20)
rnorm(20)
x
x=matrix(rnorm(100*20),100,20)
head(x)
?rnorm
rnorm(20)
rnorm(10)
y=rnorm(100)
head(x)
head(y)
fit1=glmnet(x,y)#
print(fit1)
coef(fit1,s=0.01)
set.seed(1)#
#
x <- seq(0, 1, by = 0.01)#
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)#
#
n <- length(x)
indices <- sort(sample(1:n, round(0.5 * n)))#
#
training.x <- x[indices]#
training.y <- y[indices]#
#
test.x <- x[-indices]#
test.y <- y[-indices]#
#
df <- data.frame(X = x, Y = y)
training.df <- data.frame(X = training.x, Y = training.y)#
test.df <- data.frame(X = test.x, Y = test.y)#
#
rmse <- function(y, h)#
{#
  return(sqrt(mean((y - h) ^ 2)))#
}
library('glmnet')
head(X, degree = 10))
head(poly(X, degree = 10))
head(poly(x, degree = 10))
glmnet(poly(X, degree = 10), Y)
glmnet(poly(x, degree = 10), y)
with(training.df, glmnet(poly(X, degree = 10), Y))
head(training.df)
glmnet.fit
glmnet.fit <- with(training.df, glmnet(poly(X, degree = 10), Y))
glmnet.fit
lambdas <- glmnet.fit$lambda
performance <- data.frame()
for (lambda in lambdas)#
{#
  performance <- rbind(performance,#
                       data.frame(Lambda = lambda,#
                                  RMSE = rmse(test.y,#
                                              with(test.df,#
                                                   predict(glmnet.fit,#
                                                           poly(X, degree = 10),#
                                                           s = lambda)))))#
}
head(performance)
head(performance,20)
head(performance,50)
ggplot(performance, aes(x = Lambda, y = RMSE)) +#
  geom_point() +#
  geom_line()
best.lambda <- with(performance, Lambda[which(RMSE == min(RMSE))])
best.lambda
head(glmnet.fit)
glmnet.fit
glmnet(poly(x, degree=10), y)
?with
glmnet(poly(x, degree=10), y)
glmnet.fit
?with
best.lambda <- with(performance, Lambda[which(RMSE == min(RMSE))])#
#
glmnet.fit <- with(df, glmnet(poly(X, degree = 10), Y))
glmnet.fit
coef(glmnet.fit, s = best.lambda)
ranks <- read.csv('data/oreilly.csv', stringsAsFactors = FALSE)
setwd(../06-Regularization)
setwd(.../06-Regularization)
setwd(..)
setwd(../)
setwd(/..)
setwd(~)
setwd(~/Documents)
setwd("../06-Regularization")
getwd()
ranks <- read.csv('data/oreilly.csv', stringsAsFactors = FALSE)
head(ranks,10)
library('tm')
documents <- data.frame(Text = ranks$Long.Desc.)
head(documents,1)
row.names(documents) <- 1:nrow(documents)
head(documents,2)
?DataframeSource
head(DataframeSource(documents))
corpus <- Corpus(DataframeSource(documents))
row.names(documents) <- 1:nrow(documents)
corpus <- Corpus(DataframeSource(documents))
docs <- data.frame(doc_id = c("doc_1", "doc_2"),#
                   text = c("This is a text.", "This another one."),#
                   dmeta1 = 1:2, dmeta2 = letters[1:2],#
                   stringsAsFactors = FALSE)
head(docs)
(ds <- DataframeSource(docs))
x <- Corpus(ds)
x
inspect(x)
meta(x)
ranks <- read.csv(file.path('data', 'oreilly.csv'),#
                  stringsAsFactors = FALSE)
documents <- data.frame(Text = ranks$Long.Desc.)#
row.names(documents) <- 1:nrow(documents)
head(documents)
corpus <- Corpus(DataframeSource(documents))
corpus <- tm_map(corpus, tolower)#
corpus <- tm_map(corpus, stripWhitespace)#
corpus <- tm_map(corpus, removeWords, stopwords('english'))
head(ranks)
corpus <- Corpus(DataframeSource(ranks))
head(ranks)
head(ranks,1)
documents <- data.frame(doc_id = ranks$IP_Family,text = ranks$Long.Desc.)
head(documents,1)
corpus <- Corpus(DataframeSource(documents))
corpus <- tm_map(corpus, tolower)#
corpus <- tm_map(corpus, stripWhitespace)#
corpus <- tm_map(corpus, removeWords, stopwords('english'))
dtm <- DocumentTermMatrix(corpus)
head(coupus)
corpus
dtm
x <- as.matrix(dtm)#
y <- rev(1:100)
head(x)
x <- as.matrix(dtm)#
y <- rev(1:100)set.seed(1)#
#
library('glmnet')
> y <- rev(1:100)
y <- rev(1:100)
set.seed(1)#
#
library('glmnet')
performance <- data.frame()
for (lambda in c(0.1, 0.25, 0.5, 1, 2, 5))#
{#
  for (i in 1:50)#
  {#
    indices <- sample(1:100, 80)#
    training.x <- x[indices, ]#
    training.y <- y[indices]#
    test.x <- x[-indices, ]#
    test.y <- y[-indices]#
    glm.fit <- glmnet(training.x, training.y)#
    predicted.y <- predict(glm.fit, test.x, s = lambda)#
    rmse <- sqrt(mean((predicted.y - test.y) ^ 2))#
#
    performance <- rbind(performance,#
                         data.frame(Lambda = lambda,#
                                    Iteration = i,#
                                    RMSE = rmse))#
  }#
}
ggplot(performance, aes(x = Lambda, y = RMSE)) +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'errorbar') +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'point')
head(performance)
head(performance,20)
head(performance,50)
for (lambda in c(0.1, 1, 2,3,4 5))#
{#
  for (i in 1:25)#
  {#
    indices <- sample(1:100, 80)#
    training.x <- x[indices, ]#
    training.y <- y[indices]#
    test.x <- x[-indices, ]#
    test.y <- y[-indices]#
    glm.fit <- glmnet(training.x, training.y)#
    predicted.y <- predict(glm.fit, test.x, s = lambda)#
    rmse <- sqrt(mean((predicted.y - test.y) ^ 2))#
#
    performance <- rbind(performance,#
                         data.frame(Lambda = lambda,#
                                    Iteration = i,#
                                    RMSE = rmse))#
  }#
}
for (lambda in c(0.1, 1, 2,3,4,5))#
{#
  for (i in 1:25)#
  {#
    indices <- sample(1:100, 80)#
    training.x <- x[indices, ]#
    training.y <- y[indices]#
    test.x <- x[-indices, ]#
    test.y <- y[-indices]#
    glm.fit <- glmnet(training.x, training.y)#
    predicted.y <- predict(glm.fit, test.x, s = lambda)#
    rmse <- sqrt(mean((predicted.y - test.y) ^ 2))#
#
    performance <- rbind(performance,#
                         data.frame(Lambda = lambda,#
                                    Iteration = i,#
                                    RMSE = rmse))#
  }#
}
ggplot(performance, aes(x = Lambda, y = RMSE)) +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'errorbar') +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'point')
indices <- sample(1:100, 80)#
    training.x <- x[indices, ]#
    training.y <- y[indices]
head(indices)
head(training.x)
head(training.x,1)
head(training.y)
glm.fit <- glmnet(training.x, training.y)
glm.fit
?glmnet
?glmnet
set.seed(1)#
#
x <- seq(0, 1, by = 0.01)#
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)#
#
# Twentieth code snippet#
x <- as.matrix(cbind(x,rev(x)))
head(x)
head(y)
glmnet(x, y)
df=data.frame(Factor=factor(1:5), Character=c("a","a","b","b","c"),#
              Logical=c(T,F,T,T,T), Numeric=c(2.1,2.3,2.5,4.1,1.1))#
model.matrix(~., df)
df
?model.matrix
yy <- rep(c(1, 0), each = 50)
y <- rep(c(1, 0), each = 50)
y
regularized.fit <- glmnet(x, y, family = 'binomial')
x
x <- as.matrix(dtm)
x
regularized.fit <- glmnet(x, y, family = 'binomial')
head(regularized.fit)
regularized.fit
regularized.fit <- glmnet(x, y)
regularized.fit
regularized.fit <- glmnet(x, y, family = 'gaussian')
regularized.fit
regularized.fit <- glmnet(x, y, family = 'binomial')
regularized.fit
predict(regularized.fit, newx = x, s = 0.001)
ifelse(predict(regularized.fit, newx = x, s = 0.001) > 0, 1, 0)
library('boot')#
#
inv.logit(predict(regularized.fit, newx = x, s = 0.001))
set.seed(1)#
#
performance <- data.frame()
for (i in 1:250)#
{#
  indices <- sample(1:100, 80)#
  training.x <- x[indices, ]#
  training.y <- y[indices]#
  test.x <- x[-indices, ]#
  test.y <- y[-indices]#
  for (lambda in c(0.0001, 0.001, 0.0025, 0.005, 0.01, 0.025, 0.5, 0.1))#
  {#
    glm.fit <- glmnet(training.x, training.y, family = 'binomial')#
    predicted.y <- ifelse(predict(glm.fit, test.x, s = lambda) > 0, 1, 0)#
    error.rate <- mean(predicted.y != test.y)#
#
    performance <- rbind(performance,#
                         data.frame(Lambda = lambda,#
                                    Iteration = i,#
                                    ErrorRate = error.rate))#
  }#
}
ggplot(performance, aes(x = Lambda, y = ErrorRate)) +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'errorbar') +#
  stat_summary(fun.data = 'mean_cl_boot', geom = 'point') +#
  scale_x_log10()
head(performance)
head(performance,15)
head(performance,23)
height.to.weight <- function(height, a, b)#
{#
  return(a + b * height)#
}
getwd()
setwd("..")
heights.weights <- read.csv(file.path('01-Introduction','data', '01_heights_weights_genders.csv'))
heights.weights <- read.csv(file.path('07-Optimization','data', '01_heights_weights_genders.csv'))
coef(lm(Weight ~ Height, data = heights.weights))
squared.error <- function(heights.weights, a, b)#
{#
  predictions <- with(heights.weights, height.to.weight(Height, a, b))#
  errors <- with(heights.weights, Weight - predictions)#
  return(sum(errors ^ 2))#
}
head(heights.weights)
for (a in seq(-1, 1, by = 1))#
{#
  for (b in seq(-1, 1, by = 1))#
  {#
    print(squared.error(heights.weights, a, b))#
  }#
}
?optim
library('ggplot2')
prices <- read.csv(file.path('08-PCA','data', 'stock_prices.csv'),#
                   stringsAsFactors = FALSE)
head(prices)
head(prices,10)
library('lubridate')#
#
prices <- transform(prices, Date = ymd(Date))
head(prices)
library('reshape')#
#
date.stock.matrix <- cast(prices, Date ~ Stock, value = 'Close')
head(date.stock.matrix)
prices <- subset(prices, Date != ymd('2002-02-01'))
head(prices)
head(prices,15)
prices <- subset(prices, Stock != 'DDR')
date.stock.matrix <- cast(prices, Date ~ Stock, value = 'Close')
head(date.stock.matrix)
cor.matrix <- cor(date.stock.matrix[, 2:ncol(date.stock.matrix)])#
correlations <- as.numeric(cor.matrix)
cor.matrix
ggplot(data.frame(Correlation = correlations),#
  aes(x = Correlation, fill = 1)) +#
  geom_density() +#
  theme(legend.position = 'none')
head(correlations)
length(correlations)
pca <- princomp(data.stock.matrix[, 2:ncol(date.stock.matrix)])
pca <- princomp(date.stock.matrix[, 2:ncol(date.stock.matrix)])
head(date.stock.matrix)
head(date.stock.matrix[, 2:ncol(date.stock.matrix)])
pca
head(pca$loadings)
head(pca$loadings[,1])
head(pca$loadings[,3])
head(pca$loadings[,1:3])
head(pca$loadings[,1:4])
principal.component <- pca$loadings[, 1]
loadings <- as.numeric(principal.component)
head(loadings)
ggplot(data.frame(Loading = loadings),#
  aes(x = Loading, fill = 1)) +#
  geom_density() +#
  theme(legend.position = 'none')
head(predict(pca))
market.index <- predict(pca)[, 1]
dji.prices <- read.csv(file.path('data', 'DJI.csv'),#
                       stringsAsFactors = FALSE)#
dji.prices <- transform(dji.prices, Date = ymd(Date))
dji.prices <- read.csv(file.path('08-PCA','data', 'DJI.csv'),#
                       stringsAsFactors = FALSE)
dji.prices <- transform(dji.prices, Date = ymd(Date))
dji.prices <- subset(dji.prices, Date > ymd('2001-12-31'))#
dji.prices <- subset(dji.prices, Date != ymd('2002-02-01'))
dji <- with(dji.prices, rev(Close))#
dates <- with(dji.prices, rev(Date))
head(dji.prices)
head(rev(Close))
with(dji.prices, rev(Close))
head(with(dji.prices, rev(Close)))
comparison <- data.frame(Date = dates,#
                         MarketIndex = market.index,#
                         DJI = dji)
head(comparison)
head(market.index)
ggplot(comparison, aes(x = MarketIndex, y = DJI)) +#
  geom_point() +#
  geom_smooth(method = 'lm', se = FALSE)
?melt
alt.comparison <- melt(comparison, id.vars = 'Date')#
#
names(alt.comparison) <- c('Date', 'Index', 'Price')
head(alt.comparison)
ggplot(alt.comparison,#
       aes(x = Date, y = Price, group = Index, color = Index)) +#
  geom_point() +#
  geom_line()
?melt
head(alt.comparison,15)
tail(alt.comparison,15)
comparison <- transform(comparison, MarketIndex = scale(MarketIndex))#
comparison <- transform(comparison, DJI = scale(DJI))
head(comparison)
?scale
alt.comparison <- melt(comparison, id.vars = 'Date')
head(alt.comparison)
names(alt.comparison) <- c('Date', 'Index', 'Price')
ggplot(alt.comparison, aes(x = Date, y = Price, group = Index, color = Index)) +#
  geom_point() +#
  geom_line()
plot <- ggplot(alt.comparison, aes(x = Date, y = Price, group = Index, color = Index)) +#
  geom_point() +#
  geom_line()
ggsave(plot = plot,#
       filename = file.path("08-PCA","result.pdf"),#
       height = 4.8,#
       width = 7)
