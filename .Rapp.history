test.sbj <- test.msg[grepl("Subject: ",test.sbj)]
test.sbj <- test.msg[grepl("Subject: ",test.msg)]
test.sbj
test.split <- strsplit(test.sbj, "Subject: ")
test.split
test.split <- strsplit(test.sbj, ": ")
test.split
test.split <- strsplit(test.sbj, "Subject: ")
test.split
get.date <- function(msg.vec)#
{#
  date.grep <- grepl("^Date: ", msg.vec)#
  date.grep <- which(date.grep == TRUE)#
  date <- msg.vec[date.grep[1]]#
  date <- strsplit(date, "\\+|\\-|: ")[[1]][2]#
  date <- gsub("^\\s+|\\s+$", "", date)#
  return(strtrim(date, 25))#
}
get.date("Date: Thu, 22 Aug 2002 18:26:25 +0700")
get.date("Date: Thu, 22 Aug 2002 18:26:25 +0900")
easyham.docs <- dir(easyham.path)#
easyham.docs <- easyham.docs[which(easyham.docs != "cmds")]#
easyham.parse <- lapply(easyham.docs,#
                        function(p) parse.email(file.path(easyham.path, p)))
head(easyham.docs)
easyham.path
dir(easyham.path)
easyham.path <- "/03-Classification/data/easy_ham"
dir(easyham.path)
easyham.path
getwd()
?dir()
easyham.path <- "03-Classification/data/easy_ham"
easyham.path
dir(easyham.path)
head(dir(easyham.path))
easyham.path
easyham.docs <- dir(easyham.path)#
easyham.docs <- easyham.docs[which(easyham.docs != "cmds")]#
easyham.parse <- lapply(easyham.docs,#
                        function(p) parse.email(file.path(easyham.path, p)))
head(easyham.parse)
?paste()
file.path(easyham.path)
ehparse.matrix <- do.call(rbind, easyham.parse)#
allparse.df <- data.frame(ehparse.matrix, stringsAsFactors = FALSE)#
names(allparse.df) <- c("Date", "From.EMail", "Subject", "Message", "Path")
head(allparse.df,1)
head(allparse.df,2)
head(easyham.parse,1)
head(ehparse.matrix,1)
y <- ["a","b","c"]
["a","b","c"]
y <- c("a","b","c")
y
z <- c("d","e","f")
y+z
rbind(y)
y[1]
y[3]
date.converter <- function(dates, pattern1, pattern2)#
{#
  pattern1.convert <- strptime(dates, pattern1)#
  pattern2.convert <- strptime(dates, pattern2)#
  pattern1.convert[is.na(pattern1.convert)] <- pattern2.convert[is.na(pattern1.convert)]#
  return(pattern1.convert)#
}
pattern1 <- "%a, %d %b %Y %H:%M:%S"#
pattern2 <- "%d %b %Y %H:%M:%S"#
#
allparse.df$Date <- date.converter(allparse.df$Date, pattern1, pattern2)
?strptime
allparse.df$Subject <- tolower(allparse.df$Subject)#
allparse.df$From.EMail <- tolower(allparse.df$From.EMail)
priority.df <- allparse.df[with(allparse.df, order(Date)), ]
priority.train <- priority.df[1:(round(nrow(priority.df) / 2)), ]
head(with(allparse.df, order(Date)))
head(with(allparse.df, order(Date)),10)
head(with(allparse.df, order(Date)),30)
?ddply
head(priority.train,1)
from.weight <- ddply(priority.train, .(From.EMail), summarise, Freq=length(Subject))
from.weight <- melt(with(priority.train, table(From.EMail)), #
                    value.name="Freq")
library(reshape2)
from.weight <- melt(with(priority.train, table(From.EMail)), #
                    value.name="Freq")
head(from.weight)
?plyr
?ddply
from.weight <- from.weight[with(from.weight, order(Freq)), ]
head(from.weight)
from.weight <- from.weight[with(from.weight, order(-Freq)), ]
head(from.weight)
from.weight <- from.weight[with(from.weight, order(Freq)), ]
from.ex <- subset(from.weight, Freq > 6)
from.scales <- ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:nrow(from.ex) - 0.5,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq,#
                fill = "lightgrey",#
                color = "darkblue")) +#
  scale_x_continuous(breaks = 1:nrow(from.ex), labels = from.ex$From.EMail) +#
  coord_flip() +#
  scale_fill_manual(values = c("lightgrey" = "lightgrey"), guide = "none") +#
  scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +#
  ylab("Number of Emails Received (truncated at 6)") +#
  xlab("Sender Address") +#
  theme_bw() +#
  theme(axis.text.y = element_text(size = 5, hjust = 1))
print(from.scales)
ggsave(plot = from.scales,#
       filename = file.path("images", "0011_from_scales.pdf"),#
       height = 4.8,#
       width = 7)
ggsave(plot = from.scales,#
       filename = file.path("04-Ranking/images", "0011_from_scales.pdf"),#
       height = 4.8,#
       width = 7)
?ggplot
?class
ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:nrow(from.ex) - 0.5,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq,#
                fill = "lightgrey",#
                color = "darkblue"))
ggplot(from.ex)
ggplot(from.ex) +#
  geom_rect(aes())
ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:nrow(from.ex) - 0.5,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq))
> ggplot(from.ex) +#
+   geom_rect(aes(xmin = 0,#
+                 xmax = 1:nrow(from.ex) + 0.5,#
+                 ymin = 0,#
+                 ymax = Freq))
> ggplot(from.ex) +#
+   geom_rect(aes(xmin = 0,#
+                 xmax = 1:nrow(from.ex) + 0.5,#
+                 ymin = 0,#
+                 ymax = Freq))
ggplot(from.ex) +#
  geom_rect(aes(xmin = 0,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq))
nrow(from.ex)
ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:52,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq))
ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:nrow(from.ex) - 0.5,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq,#
                fill = "lightgrey",#
                color = "darkblue"))
ggplot(from.ex) +#
  geom_rect(aes(xmin = 1:nrow(from.ex) - 0.5,#
                xmax = 1:nrow(from.ex) + 0.5,#
                ymin = 0,#
                ymax = Freq,#
                fill = "lightgrey",#
                color = "darkblue")) +#
  scale_x_continuous(breaks = 1:nrow(from.ex), labels = from.ex$From.EMail) +#
  coord_flip()
from.weight <- transform(from.weight,#
                         Weight = log(Freq + 1),#
                         log10Weight = log10(Freq + 1))
head(from.weight)
ggplot(from.weight, aes(x = 1:nrow(from.weight))) +#
  geom_line(aes(y = Weight, linetype = "ln")) +#
  geom_line(aes(y = log10Weight, linetype = "log10")) +#
  geom_line(aes(y = Freq, linetype = "Absolute")) +#
  scale_linetype_manual(values = c("ln" = 1,#
                                   "log10" = 2,#
                                   "Absolute" = 3),#
                        name = "Scaling") +#
  xlab("") +#
  ylab("Number of emails Receieved") +#
  theme_bw() +#
  theme(axis.text.y = element_blank(), axis.text.x = element_blank())
ggsave(plot = from.rescaled,#
       filename = file.path("04-Ranking","images", "0012_from_rescaled.pdf"),#
       height = 4.8,#
       width = 7)
from.rescaled <- ggplot(from.weight, aes(x = 1:nrow(from.weight))) +#
  geom_line(aes(y = Weight, linetype = "ln")) +#
  geom_line(aes(y = log10Weight, linetype = "log10")) +#
  geom_line(aes(y = Freq, linetype = "Absolute")) +#
  scale_linetype_manual(values = c("ln" = 1,#
                                   "log10" = 2,#
                                   "Absolute" = 3),#
                        name = "Scaling") +#
  xlab("") +#
  ylab("Number of emails Receieved") +#
  theme_bw() +#
  theme(axis.text.y = element_blank(), axis.text.x = element_blank())
ggsave(plot = from.rescaled,#
       filename = file.path("04-Ranking","images", "0012_from_rescaled.pdf"),#
       height = 4.8,#
       width = 7)
find.threads <- function(email.df)#
{#
  response.threads <- strsplit(email.df$Subject, "re: ")#
  is.thread <- sapply(response.threads,#
                      function(subj) ifelse(subj[1] == "", TRUE, FALSE))#
  threads <- response.threads[is.thread]#
  senders <- email.df$From.EMail[is.thread]#
  threads <- sapply(threads,#
                    function(t) paste(t[2:length(t)], collapse = "re: "))#
  return(cbind(senders,threads))#
}#
#
threads.matrix <- find.threads(priority.train)
head(threads.matrix)
test.sub2 <- "Re: Bomb Ikea"
paste(test.sub2[2:length(test.sub2)], collapse="Re: ")
paste(test.sub2[2:length(test.sub2)])
test.sub2 <- " Re: Bomb Ikea"
paste(test.sub2[2:length(test.sub2)])
length(test.sub2)
email.thread <- function(threads.matrix)#
{#
  senders <- threads.matrix[, 1]#
  senders.freq <- table(senders)#
  senders.matrix <- cbind(names(senders.freq),#
                          senders.freq,#
                          log(senders.freq + 1))#
  senders.df <- data.frame(senders.matrix, stringsAsFactors=FALSE)#
  row.names(senders.df) <- 1:nrow(senders.df)#
  names(senders.df) <- c("From.EMail", "Freq", "Weight")#
  senders.df$Freq <- as.numeric(senders.df$Freq)#
  senders.df$Weight <- as.numeric(senders.df$Weight)#
  return(senders.df)#
}
senders.df <- email.thread(threads.matrix)
head(sender.df)
head(senders.df)
get.threads <- function(threads.matrix, email.df)#
{#
  threads <- unique(threads.matrix[, 2])#
  thread.counts <- lapply(threads,#
                          function(t) thread.counts(t, email.df))#
  thread.matrix <- do.call(rbind, thread.counts)#
  return(cbind(threads, thread.matrix))#
}
thread.counts <- function(thread, email.df)#
{#
  # Need to check that we are not looking at the original message in a thread, #
  # so we check the subjects against the 're:' cue.#
  thread.times <- email.df$Date[which(email.df$Subject == thread |#
                                      email.df$Subject == paste("re:", thread))]#
  freq <- length(thread.times)#
  min.time <- min(thread.times)#
  max.time <- max(thread.times)#
  time.span <- as.numeric(difftime(max.time, min.time, units = "secs"))#
  if(freq < 2)#
  {#
    return(c(NA, NA, NA))#
  }#
  else#
  {#
    trans.weight <- freq / time.span#
    log.trans.weight <- 10 + log(trans.weight, base = 10)#
    return(c(freq, time.span, log.trans.weight))#
  }#
}
thread.weights <- get.threads(threads.matrix, priority.train)#
thread.weights <- data.frame(thread.weights, stringsAsFactors = FALSE)#
names(thread.weights) <- c("Thread", "Freq", "Response", "Weight")#
thread.weights$Freq <- as.numeric(thread.weights$Freq)#
thread.weights$Response <- as.numeric(thread.weights$Response)#
thread.weights$Weight <- as.numeric(thread.weights$Weight)#
thread.weights <- subset(thread.weights, is.na(thread.weights$Freq) == FALSE)
head(thread.weights)
head(thread.matrix)
head(threads.matrix)
head(get.threads(threads.matrix, email.df))
head(get.threads(threads.matrix, priority.train))
head(unique(threads.matrix[, 2]))
y <- c("a","b","c")
?which?
f
?which
term.counts <- function(term.vec, control)#
{#
  vec.corpus <- Corpus(VectorSource(term.vec))#
  vec.tdm <- TermDocumentMatrix(vec.corpus, control = control)#
  return(rowSums(as.matrix(vec.tdm)))#
}
thread.terms <- term.counts(thread.weights$Thread,#
                            control = list(stopwords = TRUE))
head(thread.terms)
head(thread.terms,10)
head(thread.terms,20)
thread.terms <- names(thread.terms)
head(thread.terms,20)
term.weights <- sapply(thread.terms,#
                       function(t) mean(thread.weights$Weight[grepl(t, thread.weights$Thread, fixed = TRUE)]))
head(term.weights)
term.weights <- data.frame(list(Term = names(term.weights),#
                                Weight = term.weights),#
                           stringsAsFactors = FALSE,#
                           row.names = 1:length(term.weights))
head(term.weights)
msg.terms <- term.counts(priority.train$Message,#
                         control = list(stopwords = TRUE,#
                         removePunctuation = TRUE,#
                         removeNumbers = TRUE))#
msg.weights <- data.frame(list(Term = names(msg.terms),#
                               Weight = log(msg.terms, base = 10)),#
                          stringsAsFactors = FALSE,#
                          row.names = 1:length(msg.terms))
head(msg.terms)
head(msg.weights)
msg.weights <- subset(msg.weights, Weight > 0)
head(from.weight,10)
head(sender.df,10)
head(senders.df,10)
head(thread.weights,10)
head(term.weights,10)
head(msg.weights,10)
get.weights <- function(search.term, weight.df, term = TRUE)#
{#
  if(length(search.term) > 0)#
  {#
    if(term)#
    {#
      term.match <- match(names(search.term), weight.df$Term)#
    }#
    else#
    {#
      term.match <- match(search.term, weight.df$Thread)#
    }#
    match.weights <- weight.df$Weight[which(!is.na(term.match))]#
    if(length(match.weights) < 1)#
    {#
      return(1)#
    }#
    else#
    {#
      return(mean(match.weights))#
    }#
  }#
  else#
  {#
    return(1)#
  }#
}
ls()
head(msg.terms)
msg.weights
head(msg.wights)
head(msg.weights)
rank.message <- function(path)#
{#
  msg <- parse.email(path)#
  # Weighting based on message author#
  # First is just on the total frequency#
  from <- ifelse(length(which(from.weight$From.EMail == msg[2])) > 0,#
                 from.weight$Weight[which(from.weight$From.EMail == msg[2])],#
                 1)#
  # Second is based on senders in threads, and threads themselves#
  thread.from <- ifelse(length(which(senders.df$From.EMail == msg[2])) > 0,#
                        senders.df$Weight[which(senders.df$From.EMail == msg[2])],#
                        1)#
  subj <- strsplit(tolower(msg[3]), "re: ")#
  is.thread <- ifelse(subj[[1]][1] == "", TRUE, FALSE)#
  if(is.thread)#
  {#
    activity <- get.weights(subj[[1]][2], thread.weights, term = FALSE)#
  }#
  else#
  {#
    activity <- 1#
  }
rank.message <- function(path)#
{#
  msg <- parse.email(path)#
  # Weighting based on message author#
  # First is just on the total frequency#
  from <- ifelse(length(which(from.weight$From.EMail == msg[2])) > 0,#
                 from.weight$Weight[which(from.weight$From.EMail == msg[2])],#
                 1)#
  # Second is based on senders in threads, and threads themselves#
  thread.from <- ifelse(length(which(senders.df$From.EMail == msg[2])) > 0,#
                        senders.df$Weight[which(senders.df$From.EMail == msg[2])],#
                        1)#
  subj <- strsplit(tolower(msg[3]), "re: ")#
  is.thread <- ifelse(subj[[1]][1] == "", TRUE, FALSE)#
  if(is.thread)#
  {#
    activity <- get.weights(subj[[1]][2], thread.weights, term = FALSE)#
  }#
  else#
  {#
    activity <- 1#
  }
}
}
rank.message <- function(path)#
{#
  msg <- parse.email(path)#
  # Weighting based on message author#
  # First is just on the total frequency#
  from <- ifelse(length(which(from.weight$From.EMail == msg[2])) > 0,#
                 from.weight$Weight[which(from.weight$From.EMail == msg[2])],#
                 1)#
  # Second is based on senders in threads, and threads themselves#
  thread.from <- ifelse(length(which(senders.df$From.EMail == msg[2])) > 0,#
                        senders.df$Weight[which(senders.df$From.EMail == msg[2])],#
                        1)#
  subj <- strsplit(tolower(msg[3]), "re: ")#
  is.thread <- ifelse(subj[[1]][1] == "", TRUE, FALSE)#
  if(is.thread)#
  {#
    activity <- get.weights(subj[[1]][2], thread.weights, term = FALSE)#
  }#
  else#
  {#
    activity <- 1#
  }
thread.terms <- term.counts(msg[3], control = list(stopwords = TRUE))#
  thread.terms.weights <- get.weights(thread.terms, term.weights)#
  # Weight based terms in all messages#
  msg.terms <- term.counts(msg[4],#
                           control = list(stopwords = TRUE,#
                           removePunctuation = TRUE,#
                           removeNumbers = TRUE))#
  msg.weights <- get.weights(msg.terms, msg.weights)#
  # Calculate rank by interacting all weights#
  rank <- prod(from,#
               thread.from,#
               activity, #
               thread.terms.weights,#
               msg.weights)#
  return(c(msg[1], msg[2], msg[3], rank))#
}
parse.email(test)
ls()
test.path
parse.email(test.path)
ls()
head(thread.weights)
train.paths <- priority.df$Path[1:(round(nrow(priority.df) / 2))]#
test.paths <- priority.df$Path[((round(nrow(priority.df) / 2)) + 1):nrow(priority.df)]
head(train.paths)
train.ranks <- suppressWarnings(lapply(train.paths, rank.message))#
train.ranks.matrix <- do.call(rbind, train.ranks)#
train.ranks.matrix <- cbind(train.paths, train.ranks.matrix, "TRAINING")#
train.ranks.df <- data.frame(train.ranks.matrix, stringsAsFactors = FALSE)#
names(train.ranks.df) <- c("Message", "Date", "From", "Subj", "Rank", "Type")#
train.ranks.df$Rank <- as.numeric(train.ranks.df$Rank)
head(train.rank)
head(train.ranks)
head(train.ranks.matrix)
?rbind
y <- c("1","2","3")
z <- c("5","6","7")
rbind(y)
y
rbind(y)
rbind(y)
?rbind
c(1,1:5)
m <- cbind(1, 1:7)
m
cbind(1:4, 1:8)
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)[, c(1, 3, 2)]
m
m <- cbind(m, 8:14)
m
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)
m
cbind(0, rbind(1, 1:3))
head(train.ranks.matrix)
head(train.ranks.df)
priority.threshold
priority.threshold
priority.threshold <- median(train.ranks.df$Rank)
priority.threshold
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none") +#
  theme_bw()#
ggsave(plot = threshold.plot,#
       filename = file.path("images", "01_threshold_plot.pdf"),#
       height = 4.7,#
       width = 7)
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none") +#
  theme_bw()
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none")
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none") +#
  theme_bw()
ggplot(train.ranks.df, aes(x = Rank))
ggplot(train.ranks.df, aes(x = Rank)) +#
+   stat_density(aes(fill="darkred"))
ggplot(train.ranks.df, aes(x = Rank)) #
+   stat_density(aes(fill="darkred"))
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred"))
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2)
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none")
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none")
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2)
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred"))
ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2)
threshold.plot <- ggplot(train.ranks.df, aes(x = Rank)) +#
  stat_density(aes(fill="darkred")) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_fill_manual(values = c("darkred" = "darkred"), guide = "none") +#
  theme_bw()
print(threshold.plot)
ggsave(plot = threshold.plot,#
       filename = file.path("04-Ranking/images", "01_threshold_plot.pdf"),#
       height = 4.7,#
       width = 7)
train.ranks.df$Priority <- ifelse(train.ranks.df$Rank >= priority.threshold, 1, 0)
head(train.ranks.df)
test.ranks <- suppressWarnings(lapply(test.paths,rank.message))#
test.ranks.matrix <- do.call(rbind, test.ranks)#
test.ranks.matrix <- cbind(test.paths, test.ranks.matrix, "TESTING")#
test.ranks.df <- data.frame(test.ranks.matrix, stringsAsFactors = FALSE)#
names(test.ranks.df) <- c("Message","Date","From","Subj","Rank","Type")#
test.ranks.df$Rank <- as.numeric(test.ranks.df$Rank)#
test.ranks.df$Priority <- ifelse(test.ranks.df$Rank >= priority.threshold, 1, 0)
class(train.ranks.matrix)
head(train.ranks.matrix)
head(train.ranks)
class(train.ranks)
?lapply
?do.call
do.call("complex", list(imag = 1:3))
imag
imag=1:3
imag
A <- 2#
f <- function(x) print(x^2)#
env <- new.env()#
assign("A", 10, envir = env)#
assign("f", f, envir = env)#
f <- function(x) print(x)#
f(A)
do.call("f", list(A))
list(A)
A
env
do.call("f", list(A), envir = env)
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
tmp
do.call("paste", c(tmp, sep = ""))
matrix(1:12, nrow=3)
a <- matrix(1:12, nrow=3)
do.call("paste", c(a, sep =""))
do.call("paste", c(a))
do.call("paste", list(a))
list(a)
final.df <- rbind(train.ranks.df, test.ranks.df)#
final.df$Date <- date.converter(final.df$Date, pattern1, pattern2)#
final.df <- final.df[rev(with(final.df, order(Date))), ]
head(final.df)
?rev
tail(final.df)
head(test.rank.df)
head(test.ranks.df)
write.csv(final.df, file.path("04-Classification/data", "final_df2.csv"), row.names = FALSE)
write.csv(final.df, file.path("04-Ranking/data", "final_df2.csv"), row.names = FALSE)
testing.plot <- ggplot(subset(final.df, Type == "TRAINING"), aes(x = Rank)) +#
  stat_density(aes(fill = Type, alpha = 0.65)) +#
  stat_density(data = subset(final.df, Type == "TESTING"),#
               aes(fill = Type, alpha = 0.65)) +#
  geom_vline(xintercept = priority.threshold, linetype = 2) +#
  scale_alpha(guide = "none") +#
  scale_fill_manual(values = c("TRAINING" = "darkred", "TESTING" = "darkblue")) +#
  theme_bw()
print(testing.plot)
ggsave(plot = testing.plot,#
       filename = file.path("04-Ranking/images", "02_testing_plot.pdf"),#
       height = 4.7,#
       width = 7)
head(test.ranks.df)
head(final.df)
final.df <- final.df[rev(with(final.df, order(Rank))), ]
head(final.df)
